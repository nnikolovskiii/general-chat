import React, { useState, useRef, useCallback } from 'react';
import { buildApiUrl } from '../lib/api'; // Import buildApiUrl

interface InputAreaProps {
  onSendMessage: (inputType: 'voice' | 'text', message?: string, audioPath?: string) => void;
  disabled?: boolean;
}

const InputArea: React.FC<InputAreaProps> = ({ onSendMessage, disabled = false }) => {
  const [textInput, setTextInput] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);
  const [audioChunks, setAudioChunks] = useState<Blob[]>([]);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Auto-resize textarea
  const autoResize = useCallback(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      const newHeight = Math.min(textareaRef.current.scrollHeight, 120);
      textareaRef.current.style.height = newHeight + 'px';
    }
  }, []);

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setTextInput(e.target.value);
    autoResize();
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendTextMessage();
    }
  };

  const sendTextMessage = () => {
    const message = textInput.trim();
    if (!message) return;

    onSendMessage( 'text', message);
    setTextInput('');
    
    // Reset textarea height
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(stream);
      const chunks: Blob[] = [];

      recorder.ondataavailable = (event) => {
        chunks.push(event.data);
      };

      recorder.onstop = () => {
        const audioBlob = new Blob(chunks, { type: 'audio/wav' });
        processAudioRecording(audioBlob);
        
        // Stop all tracks to release microphone
        stream.getTracks().forEach(track => track.stop());
      };

      recorder.start();
      setMediaRecorder(recorder);
      setAudioChunks(chunks);
      setIsRecording(true);
    } catch (error) {
      console.error('Error starting recording:', error);
      alert('Unable to access microphone. Please check your browser settings.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorder && isRecording) {
      mediaRecorder.stop();
      setIsRecording(false);
      setMediaRecorder(null);
    }
  };

  const generateAudioFilename = (extension = 'wav'): string => {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const randomString = Math.random().toString(36).substring(2, 8);
    return `audio-${timestamp}-${randomString}.${extension}`;
  };

  const uploadAudioBlob = async (blob: Blob, filename: string) => {
    console.log('Uploading audio blob:', { blobSize: blob.size, blobType: blob.type, filename });
    const formData = new FormData();
    formData.append('file', blob, filename);

    try {
      const response = await fetch(buildApiUrl('/files/upload'), {
        method: 'POST',
        body: formData,
        // 'Content-Type' header is automatically set by FormData for multipart/form-data
        // Credentials might be needed if the endpoint is protected
        credentials: 'include',
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to upload audio blob:', response.status, errorText);
        throw new Error(`Upload failed: ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      console.log('Audio blob uploaded successfully:', result);
      // You might want to do something with the result, e.g., store the file ID
      return result;
    } catch (error) {
      console.error('Error during audio blob upload:', error);
      // Optionally, re-throw or handle the error as needed
      throw error;
    }
  };

  const processAudioRecording = async (audioBlob: Blob) => {
    console.log('Processing audio recording:', { blobSize: audioBlob.size, blobType: audioBlob.type });
    const filename = generateAudioFilename();
    console.log('Generated filename for audio:', filename);

    try {
      // Upload the audio blob
      const uploadResult = await uploadAudioBlob(audioBlob, filename);
      console.log('Audio upload process completed.', uploadResult);

      // Use the unique_filename generated by the backend
      const backendFilename = uploadResult.data?.unique_filename;
      if (backendFilename) {
        console.log(`Using backend-generated filename: ${backendFilename}`);
        // Create the audio path URL
        const audioPath = `https://files.nikolanikolovski.com/test/download/${backendFilename}`;
        console.log(`Created audio path: ${audioPath}`);
        
        // Send both the audio path and a text message
        onSendMessage('voice',undefined,  audioPath);
      } else {
        console.error('Backend did not return a unique_filename. Using frontend generated filename as fallback.', filename);
        // Fallback to frontend generated filename if backend doesn't provide one (should not happen with current backend logic)
        const audioPath = `https://files.nikolanikolovski.com/test/download/${filename}`;
        onSendMessage('voice', undefined, audioPath);
      }
    } catch (error) {
      console.error('Error in processAudioRecording:', error);
      // Optionally, send an error message to the chat or display a notification
      const errorMessage = `Failed to process and upload audio: ${error instanceof Error ? error.message : 'Unknown error'}`;
      onSendMessage('text', errorMessage); // Or a dedicated error message type
    }
  };

  const handleSendClick = () => {
    if (textInput.trim()) {
      sendTextMessage();
    }
  };

  // Handle hold-to-record functionality
  const startHoldRecording = () => {
    if (!isRecording) {
      startRecording();
    }
  };

  const stopHoldRecording = () => {
    if (isRecording) {
      stopRecording();
    }
  };

  return (
    <div className="input-area">
      <div className="text-input-container">
        <textarea
          ref={textareaRef}
          className="text-input"
          placeholder="Type your message here..."
          value={textInput}
          onChange={handleTextChange}
          onKeyPress={handleKeyPress}
          rows={1}
          disabled={disabled}
        />
        <button
          className={`send-voice-btn ${isRecording ? 'recording' : ''}`}
          onMouseDown={startHoldRecording}
          onMouseUp={stopHoldRecording}
          onMouseLeave={stopHoldRecording}
          onTouchStart={startHoldRecording}
          onTouchEnd={stopHoldRecording}
          onClick={handleSendClick}
          disabled={disabled || (!textInput.trim() && !isRecording)}
        >
          <div className="btn-content">
            <span className="send-btn-text">
              {isRecording ? 'Recording...' : 'Send'}
            </span>
            <span className="send-btn-icon">
              {isRecording ? 'ðŸŽ¤' : 'âž¤'}
            </span>
          </div>
          {isRecording && (
            <div className="recording-indicator">
              <div className="pulse"></div>
            </div>
          )}
        </button>
      </div>
    </div>
  );
};

export default InputArea;
